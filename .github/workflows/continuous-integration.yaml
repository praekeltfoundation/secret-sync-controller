name: continuous integration
on:
  push:
    branches:
      - '*'
    tags:
      - 'v*'
  pull_request:
    branches:
      - master

jobs:
  tests:
    name: tests
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: [3.7, 3.8, 3.9]
    steps:
      - uses: actions/checkout@v2
      - name: setup python ${{ matrix.python-version }}
        uses: actions/setup-python@v1
        with:
          python-version: ${{ matrix.python-version }}
      - name: install deps
        run: |
          python -m pip install -U pip
          pip install tox tox-gh-actions
      - name: run tests
        run: |
          mkdir -p ~/.kube
          cp .ci/kubeconfig.yaml ~/.kube/config
          tox
  e2e_tests:
    name: end to end tests
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        kubernetes_version: ['1.15.7', '1.16.15', '1.17.12', '1.18.9', '1.19.6', '1.20.1']
    steps:
      - uses: actions/checkout@v2
      - name: setup py37
        uses: actions/setup-python@v1
        with:
          python-version: "3.7"
      - name: install deps
        run: |
          python -m pip install -U pip
          pip install tox
      - name: setup minikube
        id: minikube
        uses: manusa/actions-setup-minikube@v2.3.0
        with:
          minikube version: v1.15.1
          kubernetes version: v${{ matrix.kubernetes_version }}
      - name: run tests
        run: |
          tox -e e2e

  # Build and push docker images if all the tests pass. We can't put this in a
  # separate workflow triggered by workflow_run because that always runs with
  # the latest commit in the default branch instead of the thing we've just
  # tested.
  release:
    needs: [tests, e2e_tests]
    # Despite what the documentation claims, the GITHUB_TOKEN for a non-fork
    # pull request does *not* have write access to ghcr.
    if: ${{ github.event_name != 'pull_request' }}
    runs-on: ubuntu-latest
    steps:
      - name: checkout
        uses: actions/checkout@v2
      - name: set up buildx
        uses: docker/setup-buildx-action@v1
      - name: construct image metadata
        id: meta
        uses: crazy-max/ghaction-docker-meta@v2
        with:
          images: |
            ghcr.io/${{ github.repository }}
          tags: |
            type=ref,event=branch
            type=semver,pattern={{version}}
            type=sha
      - name: login to ghcr
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: build and push
        uses: docker/build-push-action@v2
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
